plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }

    maven {
        url "https://cursemaven.com"
    }

}

dependencies {
    //Lionfish (plus meat), Nautilus, (tall) Pickelweed, mulberry vine and products, Thrasher, Great Thrasher
        //Potion of repellance, mulberry jam, mulberry pie, glass door+ trapdoor, Elder eye, prismarine rod
        //Luminous Prismarine, pickelweed block, new coral, (chiseled) scute shingles (slabs, stairs, wall)
        //Tooth block slab stair wall door trapdoor, tooth lantern
        //Need to check jellyfish
        //Disable slow movement from pickelweed
    runtimeOnly fg.deobf("curse.maven:upgradeaquatic-326895:5615651")
    compileOnly fg.deobf("curse.maven:upgradeaquatic-326895:5615651")
    runtimeOnly fg.deobf("curse.maven:blueprint-382216:5292242")
    compileOnly fg.deobf("curse.maven:blueprint-382216:5292242")



    //Quark: Foxhound, Tortoise, Forgotten, Wraith, Crab, Glass Item Frames, Gold bars, hedges, more brick types,
        //More mud blocks, more potted plants, nether brick fence gate, raw ore bricks, shear vine tips, soul sand stone,
        //Permafrost,
        //Azalea wood, Glowing mushroom (also on other blocks for mushrooms), giant glowing mushroom subblocks, trumpet trees
        //Variant chests?
    runtimeOnly fg.deobf("curse.maven:quark-243121:5594847")
    compileOnly fg.deobf("curse.maven:quark-243121:5594847")
    runtimeOnly fg.deobf("curse.maven:zetaforquark-968868:5597406")
    compileOnly fg.deobf("curse.maven:zetaforquark-968868:5597406")

    //rice, tomatoes, onions, cabbage, pumpkin (from crafting), fruit salad, mixed salad,
    // cooked rice, bone broth, fried rice, bacon and eggs, Steak and Potatoes, Grilled Salmon,
    //Squid ink pasta (wheat instead of raw pasta)
    //Maybe: nether salad
    runtimeOnly fg.deobf("curse.maven:farmersdelight-398521:5051242")
    compileOnly fg.deobf("curse.maven:farmersdelight-398521:5051242")

    //Cantaloupe slice, Cantaloupe crop, Cantaloup block, stuffed cantaloupe
    runtimeOnly fg.deobf("curse.maven:delightful-637529:5654704")
    compileOnly fg.deobf("curse.maven:delightful-637529:5654704")

    //Oats, Peanuts, Oatmeal, Oat cookies, Granola, Roasted Peanuts, nut mash
    runtimeOnly fg.deobf("curse.maven:vintagedelight-949719:5626428")
    compileOnly fg.deobf("curse.maven:vintagedelight-949719:5626428")
    
    //Grongle Tree
    runtimeOnly fg.deobf("curse.maven:undergarden-379849:5182632")
    compileOnly fg.deobf("curse.maven:undergarden-379849:5182632")
    
    //Prickly Pear, Coconut Crab, Coconut Tree, Coconut, Snow and Ice bricks,
        //(need to check meat and tropical stew texture)
    runtimeOnly fg.deobf("curse.maven:ecologics-570463:4857272")
    compileOnly fg.deobf("curse.maven:ecologics-570463:4857272")


    //Corn crop
    runtimeOnly fg.deobf("curse.maven:hauntedharvest-541753:5212692")
    compileOnly fg.deobf("curse.maven:hauntedharvest-541753:5212692")
    runtimeOnly fg.deobf("curse.maven:moonlightforhauntedharvest-499980:5702363")
    compileOnly fg.deobf("curse.maven:moonlightforhauntedharvest-499980:5702363")



    //Wildflower and Lavender
    runtimeOnly fg.deobf("curse.maven:forestxreborn-689955:5516564")
    compileOnly fg.deobf("curse.maven:forestxreborn-689955:5516564")
    runtimeOnly fg.deobf("curse.maven:geckolibforforestxreborn-388172:5675221")
    compileOnly fg.deobf("curse.maven:geckolibforforestxreborn-388172:5675221")






    //Ice and Fire: Siren, Lightning Dragon, Fire Dragon, Ice Dragon, Death worm, Troll, (Pixie?), Hippocampus,
        //Cockatrice, Stymphalian Bird, Gorgon, Cyclops, Dread Queen, Lich, Thralls, Ghouls, Scuttlers, Dread Knights

        //Try to add Amphithere, Hippogryph, hydra, Sea Serpent

        //Items: All except copper, chains, sticky chains, (maybe silver), Weezer, saphire
        //Prevent rotten egg
    
        //Blocks: (maybe: silver block, silver ore, silver piles, gold piles), Dreadstone, dreadstone spawner,
        // dragon nest, dragon bricks, dragon forge, block of sea serpent scales, block of dragon bones
        //Structures: Cyclops cave-like (for all bosses), Masoleum, Siren Islands (but with moss)
    runtimeOnly fg.deobf("curse.maven:iceandfire-264231:5633453")
    compileOnly fg.deobf("curse.maven:iceandfire-264231:5633453")

    //Luminous: Miner Zombie, Miner Skeleton, Frigid Zombie, Frigid Skeleton, Swamp Zombie, Swamp Skeleton,
        //Hollow, Dark Forest Zombie, Dark Forest Skeleton, Tree Ent, Mummy, Yeti
        //Blocks: Blue berries
        //Items: blue berries, NEED TO INVESTIGATE DROPS OF MOBS
    runtimeOnly fg.deobf("curse.maven:luminous-909107:5699118")
    compileOnly fg.deobf("curse.maven:luminous-909107:5699118")

    //Kitsune, Twotailed, Jorgumo, Akaname, Oni, all weapons, all ores, all armors
    runtimeOnly fg.deobf("curse.maven:samuraidynasty-848381:5672395")
    compileOnly fg.deobf("curse.maven:samuraidynasty-848381:5672395")
    implementation fg.deobf("curse.maven:curiosforsamuraidynasty-309927:5367944")
    implementation fg.deobf("curse.maven:azurelibforsamuraidynasty-817423:5727332")


    //Firefly Flower from another mod?

    //Glowing Torch flower
    implementation fg.deobf("curse.maven:trails-and-tales-878476:5045548")
    implementation fg.deobf("curse.maven:trails-and-tales-878476:5045548")

    //Tropical Pygmy Mermaid, Depth Slasher, Deep Digger
    implementation fg.deobf("curse.maven:monsters-girls-secrets-of-mermaids-1068569:5566096")

    //Corn item
    implementation fg.deobf("curse.maven:cultural-delights-574622:5512501")


    implementation fg.deobf("curse.maven:brighter-block-light-552271:4721366")
    implementation fg.deobf("curse.maven:wthit-forge-455982:5681116")
    implementation fg.deobf("curse.maven:badpackets-615134:4784395")

    //Cherry Shrimp
    implementation fg.deobf("curse.maven:cherry-shrimp-1018833:5357995")

    //Solaria  boss
    implementation fg.deobf("curse.maven:mokels-rpg-2-sunrise-971989:5203317")

    //kinora boss
    implementation fg.deobf("curse.maven:mokels-bossfight-kinora-1007397:5299291")

    //Alex's Mobs: Mimicube, Farseer, Void Worm, Enderiophage, Straddler, Soul Vulture, Warped Mosco, Drop Bear,
    // Crimson Mosquito, Guster, Frostalker, Murmur, Minoshroom, Bunfungus, Cave Centipede
    runtimeOnly fg.deobf("curse.maven:alexsmobs-426558:5698791")
    compileOnly fg.deobf("curse.maven:alexsmobs-426558:5698791")
    runtimeOnly fg.deobf("curse.maven:citadelforalexsmobs-331936:5633260")
    compileOnly fg.deobf("curse.maven:citadelforalexsmobs-331936:5633260")




    runtimeOnly fg.deobf("curse.maven:alexscaves-924854:5633305")
    compileOnly fg.deobf("curse.maven:alexscaves-924854:5633305")


    //Twilight Forest: Urghast, Hydra, Armored Giant, Giant Miner, Knight Phantom (6), Carminite Golem, Stable Ice Core
        //Snow Queen, Unstable Ice Core, Snow Guardian, Yeti, Alpha Yeti, Naga, Redcap Goblin/Sapper, Minotaur,
        //Cave Troll, Slime Beetle, Skeleton Druid, Hedge Spider, King Spider, Pinch Beetle

        //Add twilight lich?

        //Carminite Golem: Replace planks with dark oak planks
        //Minotaur: Remove Maze map focus and add 1 more raw meef
        //Urghast: Remove Carminite and replace with more fiery tears
        //
    implementation fg.deobf("curse.maven:the-twilight-forest-227639:5468648")

    //Cataclysm: Netherite Monstrousity, Ender Golem, Ender Guardian, Ignis, The Prowler, The Leviathan, Deepling,
        // Deepling Brute, Deepling Angler, Deepling Priest, Deepling Warlock, Coralssus, Wadjet, Ancient Remnant
        // The Harbinger

        //Coralssus remove coral chunk drop and replace with coral blocks, sponges, fans, and nautilus shell
        //Leviathan: Prevent status losses as if having amethyst crab

    implementation fg.deobf("curse.maven:lendercataclysm-551586:5474791")
    implementation fg.deobf("curse.maven:lionfish-api-1001614:5363774")

    //BetterEnd: Cubozoa, EndFish, Pink forest, Chorus Forest, Shadow Forest, Umbra Jungle

    //Stalwart Dungeons: Reinforced Blaze, Propulk
    implementation fg.deobf("curse.maven:stalwart-dungeons-474817:4703671")

    //Born in Chaos: Supreme Bonescaller, Skeleton Thrasher, Bonescaller, Infernal Spirit, Barrel Zombie, Restless Spirit,
    //(Pumpkin Spirit?), Seared Spirit, Dire hound, Dire hound leader, Fallen Chaos Knight, Lifestealer, Mr. Pumpkin,
    //Sir Pumpkinhead, Senor Pumpkin, Lord Pumpkinhead,
    implementation fg.deobf("curse.maven:born-in-chaos-686437:5369688")

    //Marium's Soulslike Weaponry: Day Stalker, Night Prowler, Withered Demon, Forlorn, Soulmass, Frost Giant, Rime Spectre
    //The Decaying King, The Old Champion's Remains, The Returning Knight, The Fallen Icon, The Monarch of Chaos,
    //
    implementation fg.deobf("curse.maven:mariums-soulslike-weaponry-632066:5662104")
    implementation fg.deobf("curse.maven:projectile-damage-attribute-643780:4597791")
    implementation fg.deobf("curse.maven:attributefix-280510:4911084")


    //Bossominium: Fallarota, Redstone Turret, Fungal Brute, Fungal Brute, Netherrack Heart, Soul Reaper, Badlands Colossal
    //Chorus Beast, Strayed Warrior, Drowned King,

    implementation fg.deobf("curse.maven:bossominium-694188:5287096")

    //Mowzie's Mobs: Umvuthi, Umvuthana, the Sunbird, Ferrous Wroughtnaut, Frostmaw, (Lantern? Passive), Naga,
    implementation fg.deobf("curse.maven:mowzies-mobs-250498:5399941")

    //Majrusz's Progressive Difficulty: Cerberus, Zombie Giant
//    implementation fg.deobf("curse.maven:majruszs-progressive-difficulty-430642:5293465")
//    implementation fg.deobf("curse.maven:majrusz-library-437409:5302100")

    //Faded Conquest II: Aero Guardian; Doomharbour Lich; Dyrolian, The Faded King
//    implementation fg.deobf("curse.maven:faded-conquest-ii-1023370:5556522")

    //    implementation fg.deobf("curse.maven:deeper-caves-882911:5157225")
//    runtimeOnly fg.deobf("curse.maven:bountifulcritters-1000386:5330674")
//    compileOnly fg.deobf("curse.maven:bountifulcritters-1000386:5330674")



    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
